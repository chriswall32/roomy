"use strict";!function(o){o.module("application",["ngRoute"]).config(["$locationProvider","$routeProvider",function(o,n){o.html5Mode(!0),n.when("/room/:id",{resolve:{isLoggedIn:["$location","loginService",function(o,n){return!!n.getLoggedInUser()||o.path("/welcome")}]},template:"<gw-room></gw-room>"}).otherwise({template:"<gw-login></gw-login>"})}])}(window.angular),function(o){o.module("application").controller("exerciseOneController",["es",function(o){var n=this;this.exerciseService=o,this.title="Exercise 1, in the controller",this.clickAction=function(){console.log(n)},this.students=[{name:"John"},{name:"Josh"},{name:"Mack"}]}])}(window.angular),function(o){o.module("application").controller("exerciseTwoController",["es",function(o){var n=this;this.exerciseService=o,this.title="Exercise 2";this.buttonText="Button Text",this.possibleColors=[{name:"Brown",hex:"#a52"},{name:"Blue",hex:"#0000FF"},{name:"Gainsboro",hex:"#dcdcdc"}],this._getRandomColor=function(){return n.possibleColors[Math.floor(Math.random()*n.possibleColors.length)]},this._createObject=function(){var o={name:"Obj"+(n.objectArray.length+1),clickCount:0,color:n._getRandomColor().hex};return console.log(o),o},this.buttonMouseEnter=function(){this.buttonText="New Button Text"},this.buttonResetClick=function(){n.buttonText="Button Text"},this.objectArray=[],this.controllerInitObject=this._createObject(),this.addNewObject=function(){this.objectArray.push(this._createObject())},this.addClickCount=function(o){o.clickCount++,console.log(o.name,o.clickCount)},this.colorfilterChanged=function(){console.log(n.filter.color),n.filter.color||delete n.filter.color}}])}(window.angular),function(o){o.module("application").service("es",function(){function o(){this.loggedInUser={name:"userName",photo:"https://unsplash.com/?photo=ehNGoB6q5p4",userPassword:"password",date:Date.now},console.log(this.loggedInUser)}function n(){this.loggedInUser={},console.log(this.loggedInUser)}this.loggedInUser={},this.login=o,this.logout=n}).factory("es",function(){function o(){return console.log("Getting loggedInUser",e),e}function n(){console.log("We're here factory style"),e={name:"Ted",photo:"angularicon.jpg",loginTime:Date.now()}}function t(){e={}}return{getLoggedInUser:o,login:n,logout:t};var e})}(window.angular),function(o){o.module("application").factory("loginService",function(){function o(){return i}function n(o){console.log(o),i=o,r&&r()}function t(o){return r=o,firebase.auth().signInWithPopup(new firebase.auth.GithubAuthProvider)}function e(){return i=null,firebase.auth().signOut()}var i=null,r=null;return firebase.auth().onAuthStateChanged(n),{getLoggedInUser:o,login:t,logout:e}})}(window.angular),function(o){o.module("application").factory("navigationService",function(){function o(){return e}function n(o){e||(e=[]),e.push(o)}function t(o){e.forEach(function(n,t){n.id===o.id&&e.splice(t,1)})}return{getNavigation:o,addNavigationItem:n,removeNavigationItem:t};var e})}(window.angular),function(o){o.module("application").factory("roomService",["$timeout",function(o){function n(){return i}function t(n){return o(function(){var o=null;return i.forEach(function(t){n==t.id&&(o=t)}),o},1500)}function e(){return o(function(){return i=[{name:"Halo",id:1,picture:"www/assets/images/halo.jpg"},{name:"Sonic",id:2,picture:"www/assets/images/sonic.jpg"},{name:"Zelda",id:3,picture:"www/assets/images/zelda.jpg"},{name:"Star Fox",id:4,picture:"www/assets/images/starfox.jpg"}]},1500)}var i=null;return{getRooms:n,getRoomById:t,fetchRoomsFromDB:e}}])}(window.angular),function(o){o.module("application").component("gwLogin",{templateUrl:"www/app/components/login/login.htm",controller:"loginComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("loginComponentController",["$scope","loginService",function(o,n){this.loginService=n,this.getLoggedInUser=n.getLoggedInUser,this.refresh=function(){console.log("Controller refresh called"),o.$apply()}}])}(window.angular),function(o){o.module("application").component("gwNavigation",{templateUrl:"www/app/components/navigation/navigation.htm",controller:"navigationComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("navigationComponentController",["$location","navigationService","roomService",function(o,n,t){this.$onInit=function(){this.navigationService=n,this.roomService=t,t.fetchRoomsFromDB()},this.isItemActive=function(n){return n===o.path()}}])}(window.angular),function(o){o.module("application").component("gwRoom",{templateUrl:"www/app/components/room/room.htm",controller:"roomComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("roomComponentController",["roomService","$routeParams",function(o,n){this.$onInit=function(){var t=this;console.log(this),this.loading=!0,this.startTime=new Date,this.startTime.setHours(0,0,0,0),this.endTime=new Date,this.endTime.setHours(0,0,0,0),this.reserveReasons=["Birthday","Conference","Interview","Scrum Meeting","Honeymoon"],o.getRoomById(n.id).then(function(o){t.room=o,t.loading=!1})},this.roomSubmission=function(){return this.getMinTime()>=this.endTime?(this.myForm.endTime.$setValidity("min",!1),alert("Message from controller: time invalid")):this.myForm.$invalid?alert("Message from controller: form invalid"):void alert("Room submitted")},this.getMinTime=function(){var o=new Date(this.startTime);return o.setHours(o.getHours()+1),o}}])}(window.angular),function(o){o.module("application").component("gwRoomReservationForm",{templateUrl:"www/app/components/room/room-reservation-form/room-reservation-form.htm",controller:"roomReservationFormComponentController",controllerAs:"ctrl",bindings:{room:"<"}})}(window.angular),function(o){o.module("application").controller("roomReservationFormComponentController",function(){this.$onInit=function(){var o=this;this.loading=!0,this.startTime=new Date,this.startTime.setHours(0,0,0,0),this.endTime=new Date,this.endTime.setHours(0,0,0,0),this.reserveReasons=["Birthday","Conference","Interview","Scrum Meeting","Honeymoon"],roomService.getRoomById($routeParams.id).then(function(n){o.room=n,o.loading=!1})},this.roomSubmission=function(){return this.room.reservations||(this.room.reservations=[]),console.log("Reserving for",this.room),console.log(this.myForm),this.getMinTime()>=this.endTime?(this.myForm.endTime.$setValidity("min",!1),alert("Message from controller: time invalid")):this.myForm.$invalid?alert("Message from controller: form invalid"):void alert("Room submitted")},this.getMinTime=function(){var o=new Date(this.startTime);return o.setHours(o.getHours()+1),o}})}(window.angular),function(o){o.module("application").component("gwRoomReservationList",{templateUrl:"www/app/components/room/room-reservation-list/room-reservation-list.htm",controller:"roomReservationListComponentController",controllerAs:"ctrl",require:{parentController:"^gwRoom"}})}(window.angular),function(o){o.module("application").controller("roomReservationListComponentController",function(){})}(window.angular),function(o){o.module("application").component("gwRoomStatusHeader",{templateUrl:"www/app/components/room/room-status-header/room-status-header.htm",controller:"roomStatusHeaderComponentController",controllerAs:"ctrl",bindings:{room:"@"}})}(window.angular),function(o){o.module("application").controller("roomStatusHeaderComponentController",function(){})}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

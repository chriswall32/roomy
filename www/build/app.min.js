"use strict";!function(o){o.module("application",["ngRoute"]).constant("applicationSettings",{applicationTitle:"Geekwise Room Reserve App",getFirebaseRestUrl:function(o){return"https://confdeconflictor.firebaseio.com/"+o+".json"},getImagePath:function(o){return"www/assets/images/"+o}}).config(["$locationProvider","$routeProvider",function(o,t){o.html5Mode(!0),t.when("/room/:id",{template:"<gw-room></gw-room>"}).when("/welcome",{template:"<gw-login></gw-login>"}).when("/about",{template:"<gw-login></gw-login>"}).otherwise({template:"<gw-login></gw-login>"})}])}(window.angular),function(o){o.module("application").controller("exerciseOneController",["es",function(o){var t=this;this.exerciseService=o,this.title="Exercise 1, in the controller",this.clickAction=function(){console.log(t)},this.students=[{name:"John"},{name:"Josh"},{name:"Mack"}]}])}(window.angular),function(o){o.module("application").controller("exerciseTwoController",["es",function(o){var t=this;this.exerciseService=o,this.title="Exercise 2";this.buttonText="Button Text",this.possibleColors=[{name:"Brown",hex:"#a52"},{name:"Blue",hex:"#0000FF"},{name:"Gainsboro",hex:"#dcdcdc"}],this._getRandomColor=function(){return t.possibleColors[Math.floor(Math.random()*t.possibleColors.length)]},this._createObject=function(){var o={name:"Obj"+(t.objectArray.length+1),clickCount:0,color:t._getRandomColor().hex};return console.log(o),o},this.buttonMouseEnter=function(){this.buttonText="New Button Text"},this.buttonResetClick=function(){t.buttonText="Button Text"},this.objectArray=[],this.controllerInitObject=this._createObject(),this.addNewObject=function(){this.objectArray.push(this._createObject())},this.addClickCount=function(o){o.clickCount++,console.log(o.name,o.clickCount)},this.colorfilterChanged=function(){console.log(t.filter.color),t.filter.color||delete t.filter.color}}])}(window.angular),function(o){o.module("application").service("es",function(){function o(){this.loggedInUser={name:"userName",photo:"https://unsplash.com/?photo=ehNGoB6q5p4",userPassword:"password",date:Date.now},console.log(this.loggedInUser)}function t(){this.loggedInUser={},console.log(this.loggedInUser)}this.loggedInUser={},this.login=o,this.logout=t}).factory("es",function(){function o(){return console.log("Getting loggedInUser",e),e}function t(){console.log("We're here factory style"),e={name:"Ted",photo:"angularicon.jpg",loginTime:Date.now()}}function n(){e={}}return{getLoggedInUser:o,login:t,logout:n};var e})}(window.angular),function(o){o.module("application").factory("loginService",["$rootScope",function(o){function t(t){r=t,o.$apply()}function n(){return r}function e(){return firebase.auth().signInWithPopup(new firebase.auth.GithubAuthProvider)}function i(){return r=null,firebase.auth().signOut()}var r=null;return firebase.auth().onAuthStateChanged(t),{getLoggedInUser:n,login:e,logout:i}}])}(window.angular),function(o){o.module("application").factory("navigationService",function(){function o(){return e}function t(o){e||(e=[]),e.push(o)}function n(o){e.forEach(function(t,n){t.id===o.id&&e.splice(n,1)})}return{getNavigation:o,addNavigationItem:t,removeNavigationItem:n};var e})}(window.angular),function(o){o.module("application").factory("roomService",["$http","applicationSettings",function(o,t){function n(n){return o.get(t.getFirebaseRestUrl("rooms/"+n)).then(function(o){return o.data})}function e(){return o.get(t.getFirebaseRestUrl("rooms")).then(function(o){return o.data})}function i(){var n=t.getFirebaseRestUrl("rooms");return o.delete(n).then(function(){return o.put(n,{halo:{name:"Halo",picture:"halo.jpg"},sonic:{name:"Sonic",picture:"sonic.jpg"},zelda:{name:"Zelda",picture:"zelda.jpg"},starfox:{name:"Star Fox",picture:"starfox.jpg"},simcity:{name:"Sim City",picture:"simcity.jpg"}})}).then(e)}function r(e,i){return n(e).then(function(n){return o.post(t.getFirebaseRestUrl("rooms/"+e+"/reservations/"+a()),i)})}function a(o){var t=void 0;return t=o?new Date(o).toDateString():(new Date).toDateString(),t=t.replace(/ /g,"")}return{getRoomById:n,fetchRoomsFromDB:e,resetRoomsToDB:i,writeRoomReservation:r,getRoomDateKey:a}}])}(window.angular),function(o){o.module("application").component("gwLogin",{templateUrl:"www/app/components/login/login.htm",controller:"loginComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("loginComponentController",["$scope","loginService",function(o,t){this.loginService=t,this.getLoggedInUser=t.getLoggedInUser,this.refresh=function(){console.log("Controller refresh called"),o.$apply()}}])}(window.angular),function(o){o.module("application").component("gwNavigation",{templateUrl:"www/app/components/navigation/navigation.htm",controller:"navigationComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("navigationComponentController",["$location","navigationService","roomService",function(t,n,e){this.$onInit=function(){this.navigationService=n;var t={title:"Welcome",url:"/welcome"};n.addNavigationItem(t),e.fetchRoomsFromDB().then(function(t){o.forEach(t,function(o,t){var e={title:o.name,url:"/room/"+t};n.addNavigationItem(e)});var e={title:"About",url:"/about"};n.addNavigationItem(e)})},this.isItemActive=function(o){return o===t.path()}}])}(window.angular),function(o){o.module("application").component("gwRoom",{templateUrl:"www/app/components/room/room.htm",controller:"roomComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("roomComponentController",["$routeParams","applicationSettings","roomService",function(o,t,n){this.$onInit=function(){this.initRoom()},this.onSubmitted=function(){console.log("Our form component just updated roomComponent through output binding"),this.initRoom()},this.initRoom=function(){var e=this;this.loading=!0,n.getRoomById(o.id).then(function(n){e.room=n,e.room.id=o.id,e.room.picture=t.getImagePath(e.room.picture),e.loading=!1})}}])}(window.angular),function(o){o.module("application").component("gwRoomReservationList",{templateUrl:"www/app/components/room/room-reservation-list/room-reservation-list.htm",controller:"roomReservationListComponentController",controllerAs:"ctrl",require:{parentController:"^gwRoom"}})}(window.angular),function(o){o.module("application").controller("roomReservationListComponentController",function(){})}(window.angular),function(o){o.module("application").component("gwRoomReservationForm",{templateUrl:"www/app/components/room/room-reservation-form/room-reservation-form.htm",controller:"roomReservationFormController",controllerAs:"ctrl",bindings:{room:"<",onSubmitted:"&"}})}(window.angular),function(o){o.module("application").controller("roomReservationFormController",["roomService",function(o){this.$onInit=function(){this.startTime=new Date,this.startTime.setHours(12,0,0,0),this.endTime=new Date,this.endTime.setHours(12,0,0,0),this.reserveReasons=["Birthday","Conference","Interview","Scrum Meeting","Client Meeting","Honeymoon"],this.roomSubmission=function(){if(this.getMinTime()>=this.endTime)return this.myForm.endTime.$setValidity("min",!1);var t={};return t.email=this.email1,t.startTime=this.startTime,t.endTime=this.endTime,t.specialInstructions=this.specialInstructions,t.reserveReason=this.reserveReason,o.writeRoomReservation(this.room.id,t).then(this.onSubmitted()).catch(function(o){return alert(o.data.error)})},this.getMinTime=function(){var o=new Date(this.startTime);return o.setHours(o.getHours()+.9),o}}}])}(window.angular),function(o){o.module("application").component("gwRoomStatusHeader",{templateUrl:"www/app/components/room/room-status-header/room-status-header.htm",controller:"roomStatusHeaderComponentController",controllerAs:"ctrl",bindings:{room:"@"}})}(window.angular),function(o){o.module("application").controller("roomStatusHeaderComponentController",function(){})}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
